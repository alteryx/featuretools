name: Unit Tests - Latest Dependencies
on:
  pull_request:
    types: [opened, synchronize]
  push:
    branches:
      - main
  workflow_dispatch:
jobs:
  unit_tests:
    name: ${{ matrix.python_version }} unit tests ${{ matrix.libraries }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python_version: ["3.10"]
        libraries: ["spark"]

    steps:
      - name: Set up python ${{ matrix.python_version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python_version }}
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
      - name: Build featuretools package
        run: make package_featuretools
      - name: Set up pip and graphviz
        run: |
          pip config --site set global.progress_bar off
          python -m pip install --upgrade pip
          sudo apt update && sudo apt install -y graphviz
      - if: ${{ !startsWith(matrix.libraries, 'spark') }}
        name: Install featuretools with test requirements
        run: |
          python -m pip install unpacked_sdist/
          python -m pip install unpacked_sdist/[test]
      - if: ${{ startsWith(matrix.libraries, 'spark') }}
        name: Install spark pkg, featuretools with test requirements and spark requirements
        run: |
          sudo apt install -y openjdk-11-jre-headless
          JAVA_HOME="/usr/lib/jvm/java-11-openjdk-amd64"
          python -m pip install unpacked_sdist/[spark]
          python -m pip install unpacked_sdist/[test]
      - if: ${{ matrix.python_version == 3.8 && startsWith(matrix.libraries, 'spark') }}
        name: Generate coverage args
        run: echo "coverage_args=--cov=featuretools --cov-config=../pyproject.toml --cov-report=xml:../coverage.xml" >> $GITHUB_ENV
      - if: ${{ env.coverage_args }}
        name: Erase coverage files
        run: |
          cd unpacked_sdist
          coverage erase
      - if: ${{ !startsWith(matrix.libraries, 'spark') }}
        name: Run unit tests (no code coverage)
        run: |
          cd unpacked_sdist
          pytest featuretools/ -n=2
      - if: ${{ matrix.libraries == 'spark' }}
        name: Run unit tests (misc)
        run: |
          cd unpacked_sdist
          pytest featuretools/ --durations=0
      - if: ${{ env.coverage_args }}
        name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: true
          files: ${{ github.workspace }}/coverage.xml
          verbose: true
