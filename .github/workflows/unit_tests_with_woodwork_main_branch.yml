name: Unit Tests - Featuretools with Woodwork main branch
on:
  workflow_dispatch:
jobs:
  unit_tests_woodwork_main:
    if: ${{ github.repository_owner == 'alteryx' }}
    name: ${{ matrix.python_version }} unit tests ${{ matrix.libraries }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        python_version: ["3.7", "3.8", "3.9", "3.10"]
        libraries: ["core", "spark"]
        exclude:
          - python_version: "3.10"
            libraries: "spark"
    steps:
      - name: Set up python ${{ matrix.python_version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python_version }}
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Build featuretools package
        run: make package_featuretools
      - name: Set up pip and graphviz
        run: |
          pip config --site set global.progress_bar off
          python -m pip install -U pip
          sudo apt update && sudo apt install -y graphviz
      - if: ${{ matrix.libraries == 'spark' && matrix.python_version != '3.10' }}
        name: Install Woodwork & Featuretools with spark pkg - spark requirements
        run: |
          sudo apt install -y openjdk-11-jre-headless
          JAVA_HOME="/usr/lib/jvm/java-11-openjdk-amd64"
          PYSPARK_SUBMIT_ARGS="--master local[2] pyspark-shell"
          python -m pip install -e unpacked_sdist/[spark]
      - name: Install Woodwork & Featuretools - test requirements
        run: |
          python -m pip install -e unpacked_sdist/[test]
          python -m pip install -U git+https://github.com/alteryx/woodwork
      - if: ${{ !( matrix.libraries == 'spark' && matrix.python_version == '3.10') }}
        name: Run unit tests without code coverage
        run: |
          echo "Run unit tests without code coverage for ${{ matrix.python_version }} and ${{ matrix.libraries }}"
          echo "Testing with woodwork version:" `python -c "import woodwork; print(woodwork.__version__)"`
          pytest featuretools/ -n 2
  slack_alert_failure:
    name: Send Slack alert if failure
    needs: unit_tests_woodwork_main
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - name: Send Slack alert if failure
        if: ${{ needs.unit_tests_woodwork_main.result == 'success' }}
        id: slack
        uses: slackapi/slack-github-action@v1.18.0
        with:
          payload: |
            {
              "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
              "python_version": "${{ matrix.python_version }}",
              "libraries": "${{ matrix.libraries }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
